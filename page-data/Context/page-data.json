{"componentChunkName":"component---src-templates-blog-post-js","path":"/Context/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>Instead of passing down props through tree of nested child components (often as much as 20+ times from parent to the last child), there is a better way how components can receive props. The way is called <strong>context</strong> and you can think of it as something like a global variable.</p>\n</blockquote>\n<blockquote>\n<p>Imagine component structure:\nA -> D -> C</p>\n</blockquote>\n<blockquote>\n<p>A is parent and only summons D component. Then D summons  C</p>\n</blockquote>\n<blockquote>\n<p>A has prop for theme ( value: \"green\") which needs to be passed to C. But only to C. Other component like D doesnt care about this prop.</p>\n</blockquote>\n<blockquote>\n<p>Top level component PROVIDES context and child component CONSUMES the context. </p>\n</blockquote>\n<p>Provider example: component A.  </p>\n<p>Consumer Example: componenet called D</p>\n<blockquote>\n<p>A: provides theme</p>\n</blockquote>\n<blockquote>\n<p>C: consumes theme</p>\n</blockquote>\n<blockquote>\n<p>First we create the cotext itself</p>\n</blockquote>\n<pre><code>// src/ThemeContext.js\nimport React from 'react';\nconst ThemeContext = React.createContext(null);\nexport default ThemeContext;\n</code></pre>\n<blockquote>\n<p>React.createContext will give us access to Provider and Consumer components.</p>\n</blockquote>\n<pre><code>ThemeContext = React.createContext(null);\n</code></pre>\n<blockquote>\n<p>Then we create component A which will be context provider</p>\n</blockquote>\n<pre><code>// src/ComponentA.js\nimport React from 'react';\nimport ThemeContext from './ThemeContext';\nconst A = () => (\n  &#x3C;ThemeContext.Provider value=\"green\">\n    &#x3C;D />\n  &#x3C;/ThemeContext.Provider>\n);\n</code></pre>\n<blockquote>\n<p>We need to include new components called ThemeContext.Provider</p>\n</blockquote>\n<blockquote>\n<p>A doesnt pass any props to D component. It makes value green available to all child components. A summons D component.</p>\n</blockquote>\n<blockquote>\n<p>Lets look at C component. Now that A has made the value green available to all children, C can access that value:</p>\n</blockquote>\n<pre><code>// src/ComponentC.js\nimport React from 'react';\nimport ThemeContext from './ThemeContext';\nconst C = () => (\n  &#x3C;ThemeContext.Consumer>\n    {value => (\n      &#x3C;p style={{ color: value }}>\n        Hello World\n      &#x3C;/p>\n    )}\n  &#x3C;/ThemeContext.Consumer>\n);\n</code></pre>\n<blockquote>\n<p>Complete example:</p>\n</blockquote>\n<pre><code>import React from \"react\";\nconst ColorContext = React.createContext(null);\nexport function SimpleContext(){\n    return (\n        &#x3C;ColorContext.Provider value=\"green\">\n        &#x3C;D />\n        &#x3C;/ColorContext.Provider>\n        )\n    }\nconst D = () => {\n    return (\n        &#x3C;div>\n        &#x3C;p>I am D component which is summoned by Parent component but I dont consume Context&#x3C;/p>\n        &#x3C;C />\n        &#x3C;/div>\n    )\n}\nconst C = () => {\n    return (\n        &#x3C;ColorContext.Consumer>\n        { value => (\n        &#x3C;p style={{color: value}}>I am a C component summoned by D but I received beautiful green colour from my dear Parent&#x3C;/p>\n        )}\n        &#x3C;/ColorContext.Consumer>\n    )\n}\n</code></pre>\n<blockquote>\n<p>With HOOKs we can make this even more elegant</p>\n</blockquote>\n<pre><code>import React, { useContext } from \"react\";\nconst ColorContext = React.createContext(\n    { value: \"purple\"}\n);\nexport function SimpleContextUsewithHook(){\n    return (        \n        &#x3C;D />        \n        )\n    }\nconst D = () => {\n    return (\n        &#x3C;div>\n        &#x3C;p>I am D component which is summoned by Parent component but I dont consume Context&#x3C;/p>\n        &#x3C;C />\n        &#x3C;/div>\n    )\n}\nconst C = () => {\n    const context = useContext(ColorContext);\n    return (  \n        &#x3C;p style={{color: context.value}}>I am a C component summoned by D but I received beautiful purple colour from my dear Parent&#x3C;/p> \n    )\n}\n</code></pre>\n<blockquote>\n<p>Complex example with classes where we still use provider because we also want to be able to update the team</p>\n</blockquote>\n<pre><code>import React from 'react';\nimport { render } from 'react-dom';\nimport './style.css';\nconst ProfileContext = React.createContext();\nclass ProfileProvider extends React.Component {\n  state = {\n    company: 'Progress',\n    companyImage: 'https://svgshare.com/i/9ir.svg',\n    url: 'https://www.telerik.com/kendo-react-ui/',\n    userImage: 'https://i.imgur.com/Y1XRKLf.png',\n    userName: 'Kendoka',\n    fullName: 'Kendō No Arikata',\n    team: 'KendoReact',\n    changeTeam: (team) => this.setState({\n      team: `Kendo${team}`\n    })\n  }\n  render() {\n    return (\n      &#x3C;ProfileContext.Provider value={this.state}>\n        {this.props.children}\n      &#x3C;/ProfileContext.Provider>\n    )\n  }\n}\nconst App = () => (\n  &#x3C;ProfileProvider>\n    &#x3C;Profile />\n  &#x3C;/ProfileProvider>\n)\nconst Profile = () => (\n  &#x3C;div className=\"profile\">\n    &#x3C;ProfileContext.Consumer>\n      {context => &#x3C;img src={context.companyImage} />}\n    &#x3C;/ProfileContext.Consumer>\n    &#x3C;User />\n  &#x3C;/div>\n)\nconst User = () => (\n  &#x3C;div className=\"user\">\n    &#x3C;ProfileContext.Consumer>\n      {context =>\n        &#x3C;React.Fragment>\n          &#x3C;a href={context.url}>\n            &#x3C;img src={context.userImage} width=\"138px\" />\n          &#x3C;/a>\n          &#x3C;h1 className=\"profile-userName\">{context.userName}&#x3C;/h1>\n          &#x3C;p className=\"profile-fullName\">({context.fullName})&#x3C;/p>\n          &#x3C;Team />\n          &#x3C;button className=\"profile-button\"\n            onClick={() => context.changeTeam('Angular')}>Angular&#x3C;/button>\n          &#x3C;button className=\"profile-button\"\n            onClick={() => context.changeTeam('Vue')}>Vue&#x3C;/button>\n          &#x3C;button className=\"profile-button\"\n            onClick={() => context.changeTeam('React')}>React&#x3C;/button>\n        &#x3C;/React.Fragment>\n      }\n    &#x3C;/ProfileContext.Consumer>\n  &#x3C;/div>\n)\nconst Team = () => (\n  &#x3C;ProfileContext.Consumer>\n    {context =>\n      &#x3C;div className=\"team\">\n        &#x3C;p className=\"profile-team\">{context.team}&#x3C;/p>\n      &#x3C;/div>\n    }\n  &#x3C;/ProfileContext.Consumer>\n)\nrender(&#x3C;App />, document.getElementById('root'));\n</code></pre>\n<blockquote>\n<p>Same with hooks</p>\n</blockquote>\n<pre><code>import React, { Component, useContext } from 'react';\nimport { render } from 'react-dom';\nimport './style.css';\nconst ProfileContext = React.createContext();\nclass ProfileProvider extends Component {\n  state = {\n    company: 'Progress',\n    companyImage: 'https://svgshare.com/i/9ir.svg',\n    url: 'https://www.telerik.com/kendo-react-ui/',\n    userImage: 'https://i.imgur.com/Y1XRKLf.png',\n    userName: 'Kendoken',\n    fullName: 'Kendoken No Michi',\n    team: 'KendoReact',\n    toggleTeam: (team) => this.setState({\n      team: `Kendo${team}`\n    })\n  }\n  render() {\n    return (\n      &#x3C;ProfileContext.Provider value={this.state}>\n        {this.props.children}\n      &#x3C;/ProfileContext.Provider>\n    )\n  }\n}\nlet Profile = () => {\n  const context = useContext(ProfileContext);\n  return (\n    &#x3C;div className=\"profile\">\n      &#x3C;img src={context.companyImage} />\n      &#x3C;User />\n    &#x3C;/div>\n  )\n}\nlet User = () => {\n  const context = useContext(ProfileContext);\n return (\n    &#x3C;div className=\"user\">\n      &#x3C;a href={context.url}>\n        &#x3C;img src={context.userImage} width=\"138px\" />\n      &#x3C;/a>\n      &#x3C;h1 className=\"profile-userName\">{context.userName}&#x3C;/h1>\n      &#x3C;p className=\"profile-fullName\">({context.fullName})&#x3C;/p>\n      &#x3C;Team />\n      &#x3C;button className=\"profile-button\"\n        onClick={() => context.toggleTeam('Angular')}>Angular&#x3C;/button>\n      &#x3C;button className=\"profile-button\"\n        onClick={() => context.toggleTeam('Vue')}>Vue&#x3C;/button>\n      &#x3C;button className=\"profile-button\"\n        onClick={() => context.toggleTeam('React')}>React&#x3C;/button>\n    &#x3C;/div>\n  )\n}\nlet Team = () => {\n  const context = useContext(ProfileContext);\n  return (\n    &#x3C;div className=\"team\">\n      &#x3C;p className=\"profile-team\">{context.team}&#x3C;/p>\n    &#x3C;/div>\n  )\n}\nclass App extends Component {\n  render() {\n    return (\n      &#x3C;ProfileProvider>\n        &#x3C;Profile />\n      &#x3C;/ProfileProvider>\n    );\n  }\n}\nrender(&#x3C;App />, document.getElementById('root'));\n</code></pre>\n<blockquote>\n<p>Resource: </p>\n</blockquote>\n<p><a href=\"https://www.robinwieruch.de/react-context\">https://www.robinwieruch.de/react-context</a></p>","frontmatter":{"title":"Context"},"excerpt":"Instead of passing down props through tree of nested child components (often as much as 20+ times from parent to the last child), there is a…"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/Context/"}}}