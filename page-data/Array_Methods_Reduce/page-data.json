{"componentChunkName":"component---src-templates-blog-post-js","path":"/Array_Methods_Reduce/","result":{"data":{"markdownRemark":{"html":"<p>Reduce method is very powerful one which allows you to iterate through all elements in an array, perform certain calculations on it and then returns something: a single value, array, etc.</p>\n<p>Let's start with an array:</p>\n<pre><code>const myArray = [1,4,2]\n</code></pre>\n<p>We want to sum this up and return one value of the total sum which would be 7</p>\n<p>We can call:</p>\n<pre><code>myArray.reduce(reducer, initialValue);\n</code></pre>\n<p><strong>reducer</strong> is a function, which means that .reduce calls upon another function which we need to define. </p>\n<p><strong>initialValue</strong> is optional, we can kick it off with some starting value, but for the first simple example we will skip it.</p>\n<p>Example reducer function:</p>\n<pre><code>  const reducer = (accumulator, currentValue) => {\n        accumulator = (accumulator + currentValue)        \n        return (accumulator);\n    } \n</code></pre>\n<p>reducer takes in 2 arguments:</p>\n<p><strong>accumulator</strong> - value where we can store results of our calculations. Initial accumulator will equal the first element in array which will be 1 (unless we set initial value for it)</p>\n<p><strong>current value</strong> - value at which we are currently iterating, initially this will be value of second element in array which is number 4 (unless we set initial value, then the initial currentValue will be the first element)</p>\n<p>There can be other arguments like currentIndex (index of currentValue where the iteration currently happens) but the most basic example is with above-mentioned two.</p>\n<p>Each iteration ( or function call ) will deliver a returning value! It means on each step return will be executed. This returning value is going to get passed into next step!</p>\n<p>Example to use it for the highest number:</p>\n<pre><code>const reducer = (accumulator, currentValue) => {\n        if (currentValue >= accumulator){\n            accumulator = currentValue;\n        }\n        return (accumulator);\n    } \n</code></pre>\n<p>Example to usee it for average number:</p>\n<pre><code>const reducer = (accumulator, currentValue) => {\n        if (currentValue >= accumulator){\n            accumulator = currentValue;\n       }\n        return (accumulator);\n    } \n &#x3C;p>Im a reducer and highest number is: {myArray.reduce(reducer)}&#x3C;/p>\n</code></pre>","frontmatter":{"title":"Array Methods .reduce"},"excerpt":"Reduce method is very powerful one which allows you to iterate through all elements in an array, perform certain calculations on it and thenâ€¦"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/Array_Methods_Reduce/"}}}