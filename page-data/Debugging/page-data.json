{"componentChunkName":"component---src-templates-blog-post-js","path":"/Debugging/","result":{"data":{"markdownRemark":{"html":"<p>Imagine we add to our code a line like this:</p>\n<pre><code>debugger;\n</code></pre>\n<p>Then we are able to execute code only up until this line. </p>\n<p>You need to go to your website and open the DEV TOOLS (without opening the dev tools you won't be able to see the debugger stopping at the given place).</p>\n<p>Automatical execution will stop and we will be able to use console to check for any value of our variable and hence check if all variables have correct values. </p>\n<p>For example if we put debugger to onClick event handler, we can type in console:</p>\n<pre><code>event\n</code></pre>\n<p>and we will see the whole event object.</p>\n<p>We can put</p>\n<pre><code>event.target\n</code></pre>\n<p>and see all the options we have that can be used as event.target. Target.event set is pre-defined and doesn't display any custom values, like prop names.</p>\n<p>To read custom properties, we can use:</p>\n<pre><code>event.target.attribute\n</code></pre>\n<p>For example if we gave our button attribute <code>user</code>, then we can access it by</p>\n<pre><code>event.target.attribute.user\n</code></pre>\n<p>If we wanted to access what is in between of the closing and ending tag of button we write</p>\n<pre><code>event.target.innerHTML\n</code></pre>\n<p>Please Note: React does not persist the events. Therefore many of those values might be empty. We can add this line to our code:</p>\n<pre><code>event.persist();\n</code></pre>","frontmatter":{"title":"Debugging"},"excerpt":"Imagine we add to our code a line like this: Then we are able to execute code only up until this line.  You need to go to your website andâ€¦"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/Debugging/"}}}